import argparse
import os
import pathlib
import pretty_midi

parser = argparse.ArgumentParser(description='Turn a MIDI file into a GRUB init tune')

parser.add_argument('midi_file', metavar='MIDIFILE', type=pathlib.Path, help='Input MIDI file')

args = parser.parse_args()

midi_name = os.path.basename(args.midi_file)
grub_init_tune_str = f"# '{midi_name}' : Generated by grub_symphony.py\n"

midi_data = pretty_midi.PrettyMIDI(str(args.midi_file))

# Start string
grub_init_tune_str += "GRUB_INIT_TUNE=\""

# 'Granularity' is not only the 'tempo' of the init tune, but also how fine-tuned the durations will be
# Higher = more granularity, Lower = less granularity
# Feel free to raise this or lower it as much as you want, but you'll have the best results if you use a multiple of 60
granularity = 1440


duration_multiplier = granularity/60

# Add tempo to string
grub_init_tune_str += f"{granularity} "

# Select the first instrument
selected_instrument = midi_data.instruments[0]

# Iterate through each note in the MIDI
current_note = None
last_note = None
for note in selected_instrument.notes:
    current_note = note

    if last_note and current_note.start != last_note.start:
        # There is a rest
        rest_duration = int(current_note.start*duration_multiplier - last_note.end*duration_multiplier)
        # Don't add a rest if it has a duration of 0
        if rest_duration != 0:
            grub_init_tune_str += "0 "
            grub_init_tune_str += f"{str(rest_duration)} "
    
    note_hz = str(int(pretty_midi.note_number_to_hz(note.pitch)))
    note_duration = str(int(note.get_duration()*duration_multiplier))
    grub_init_tune_str += f"{note_hz} "
    grub_init_tune_str += f"{note_duration} "
    last_note = note

# Close the string
grub_init_tune_str = grub_init_tune_str[:-1] + "\""

print(grub_init_tune_str)